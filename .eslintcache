[{"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\index.js":"1","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\App.js":"2","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\ErrorBoundary.js":"3","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\store.js":"4","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\App\\appActions.js":"5","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\App\\Layout.js":"6","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\utils\\LanguageFiles.js":"7","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\utils\\API.js":"8","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\App\\Router.js":"9","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\rootReducer.js":"10","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Auth\\authActions.js":"11","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\App\\components\\Alert.js":"12","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\App\\routes.js":"13","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Auth\\authReducer.js":"14","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\App\\appReducer.js":"15","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\NotFound\\NotFound.js":"16","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\App\\Layout\\Header.js":"17","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Analysis\\Analysis.js":"18","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Expense\\Expense.js":"19","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\UserDetail\\UserDetail.js":"20","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\CreatePaid\\CreatePaid.js":"21","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\utils\\helper.js":"22","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Auth\\pages\\ForgotPassword.js":"23","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Auth\\pages\\Login.js":"24","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\CreatePatient\\CreatePatient.js":"25","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Payments\\Payments.js":"26","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Home\\Home.js":"27","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\App\\Layout\\components\\UserArea.js":"28","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\utils\\components\\InputWLabel.js":"29","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\utils\\components\\SelectWLabel.js":"30","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\utils\\components\\CutomCheckbox.js":"31","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Auth\\pages\\components\\LeftSide.js":"32","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Calendar\\Calendar.js":"33","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Calendar\\components\\AddAppointment.js":"34","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\utils\\components\\SimpleList.js":"35","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\utils\\components\\Loader.js":"36","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\utils\\components\\MonkButton.js":"37","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\utils\\components\\Modal.js":"38"},{"size":1040,"mtime":1641476299865,"results":"39","hashOfConfig":"40"},{"size":5610,"mtime":1641563648366,"results":"41","hashOfConfig":"40"},{"size":444,"mtime":1641476299841,"results":"42","hashOfConfig":"40"},{"size":330,"mtime":1641476299866,"results":"43","hashOfConfig":"40"},{"size":573,"mtime":1641560172939,"results":"44","hashOfConfig":"40"},{"size":5760,"mtime":1641558227310,"results":"45","hashOfConfig":"40"},{"size":472,"mtime":1641476299867,"results":"46","hashOfConfig":"40"},{"size":251,"mtime":1641476299867,"results":"47","hashOfConfig":"40"},{"size":3948,"mtime":1641476299834,"results":"48","hashOfConfig":"40"},{"size":419,"mtime":1641476299866,"results":"49","hashOfConfig":"40"},{"size":252,"mtime":1641476299836,"results":"50","hashOfConfig":"40"},{"size":3237,"mtime":1641476299835,"results":"51","hashOfConfig":"40"},{"size":3635,"mtime":1641557292087,"results":"52","hashOfConfig":"40"},{"size":1038,"mtime":1641476299836,"results":"53","hashOfConfig":"40"},{"size":1104,"mtime":1641476299834,"results":"54","hashOfConfig":"40"},{"size":1430,"mtime":1641478591899,"results":"55","hashOfConfig":"40"},{"size":2432,"mtime":1641476299832,"results":"56","hashOfConfig":"40"},{"size":6275,"mtime":1641476299830,"results":"57","hashOfConfig":"40"},{"size":14943,"mtime":1641478297516,"results":"58","hashOfConfig":"40"},{"size":12978,"mtime":1641478689570,"results":"59","hashOfConfig":"40"},{"size":25204,"mtime":1641477129537,"results":"60","hashOfConfig":"40"},{"size":1937,"mtime":1641476299872,"results":"61","hashOfConfig":"40"},{"size":4853,"mtime":1641476299837,"results":"62","hashOfConfig":"40"},{"size":6477,"mtime":1641476299838,"results":"63","hashOfConfig":"40"},{"size":8147,"mtime":1641478274493,"results":"64","hashOfConfig":"40"},{"size":8822,"mtime":1641478213498,"results":"65","hashOfConfig":"40"},{"size":10610,"mtime":1641478485586,"results":"66","hashOfConfig":"40"},{"size":1143,"mtime":1641476299833,"results":"67","hashOfConfig":"40"},{"size":4051,"mtime":1641476299868,"results":"68","hashOfConfig":"40"},{"size":2336,"mtime":1641476299869,"results":"69","hashOfConfig":"40"},{"size":815,"mtime":1641476299868,"results":"70","hashOfConfig":"40"},{"size":955,"mtime":1641476299839,"results":"71","hashOfConfig":"40"},{"size":9314,"mtime":1641895308236,"results":"72","hashOfConfig":"40"},{"size":8942,"mtime":1641559617168,"results":"73","hashOfConfig":"40"},{"size":8142,"mtime":1641564491316,"results":"74","hashOfConfig":"40"},{"size":247,"mtime":1641560269509,"results":"75","hashOfConfig":"40"},{"size":1337,"mtime":1641560603024,"results":"76","hashOfConfig":"40"},{"size":2515,"mtime":1641560664025,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"ob7ofd",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"80"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"80"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"80"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"80"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"80"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"80"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"80"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"80"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"80"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"80"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\index.js",[],["165","166"],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\App.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\ErrorBoundary.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\store.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\App\\appActions.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\App\\Layout.js",["167","168","169"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport logo from \"../assets/images/payment-logo.png\";\r\nimport homeMenu from \"../assets/images/home-menu.svg\";\r\nimport homeMenuActive from \"../assets/images/home-menu-active.svg\";\r\nimport paymentsMenu from \"../assets/images/payments-menu.svg\";\r\nimport paymentsMenuActive from \"../assets/images/payments-menu-active.svg\";\r\nimport analysesMenu from \"../assets/images/analyses-menu.svg\";\r\nimport analysesMenuActive from \"../assets/images/analyses-menu-active.svg\";\r\nimport expensesMenu from \"../assets/images/expenses-menu.svg\";\r\nimport expensesMenuActive from \"../assets/images/expenses-menu-active.svg\";\r\nimport doctor_settingsMenu from \"../assets/images/doctor_settings-menu.svg\";\r\nimport doctor_settingsMenuActive from \"../assets/images/doctor_settings-menu-active.svg\";\r\nimport system_settingsMenu from \"../assets/images/system_settings-menu.svg\";\r\nimport system_settingsMenuActive from \"../assets/images/system_settings-menu-active.svg\";\r\nimport clinicMenu from \"../assets/images/clinic-menu.svg\";\r\nimport clinicMenuActive from \"../assets/images/clinic-menu-active.svg\";\r\nimport { withRouter } from \"react-router\";\r\nimport { connect } from \"react-redux\";\r\nimport { authRoutes } from \"../App/routes\";\r\nconst Header = React.lazy(() => import(\"./Layout/Header\"));\r\nconst Layout = (props) => {\r\n  const { location } = props;\r\n  return (\r\n    <>\r\n      <div className=\"d-flex\">\r\n        {props.user.isLoggedIn && (\r\n          <div className=\"left-side-menu min-vh-100\" id=\"sidebar-wrapper\">\r\n            <Link to={authRoutes.home.links[props.lang]}>\r\n              <img src={logo} width={46} alt={props.translate(\"payments\")} />\r\n            </Link>\r\n            <Link\r\n              className={location.pathname === \"/\" ? \"active\" : \"\"}\r\n              to={authRoutes.home.links[props.lang]}\r\n            >\r\n              <img\r\n                className=\"mh-24\"\r\n                src={location.pathname === \"/\" ? homeMenuActive : homeMenu}\r\n                alt={props.translate(\"home\")}\r\n              />\r\n              {props.translate(\"home\")}\r\n            </Link>\r\n            <Link\r\n              className={\r\n                location.pathname.includes(\r\n                  authRoutes.payments.links[props.lang]\r\n                )\r\n                  ? \"active\"\r\n                  : \"\"\r\n              }\r\n              to={authRoutes.payments.links[props.lang]}\r\n            >\r\n              <img\r\n                className=\"mh-24\"\r\n                src={\r\n                  location.pathname.includes(\r\n                    authRoutes.payments.links[props.lang]\r\n                  )\r\n                    ? paymentsMenuActive\r\n                    : paymentsMenu\r\n                }\r\n                alt={props.translate(\"payments\")}\r\n              />\r\n              {props.translate(\"payments\")}\r\n            </Link>\r\n            <Link\r\n              className={\r\n                location.pathname.includes(\r\n                  authRoutes.analysis.links[props.lang]\r\n                )\r\n                  ? \"active\"\r\n                  : \"\"\r\n              }\r\n              to={authRoutes.analysis.links[props.lang]}\r\n            >\r\n              <img\r\n                className=\"mh-24\"\r\n                src={\r\n                  location.pathname.includes(\r\n                    authRoutes.analysis.links[props.lang]\r\n                  )\r\n                    ? analysesMenuActive\r\n                    : analysesMenu\r\n                }\r\n                alt={props.translate(\"analyses\")}\r\n              />\r\n              {props.translate(\"analyses\")}\r\n            </Link>\r\n            <Link\r\n              className={\r\n                location.pathname.includes(authRoutes.expense.links[props.lang])\r\n                  ? \"active\"\r\n                  : \"\"\r\n              }\r\n              to={authRoutes.expense.links[props.lang]}\r\n            >\r\n              <img\r\n                className=\"mh-24\"\r\n                src={\r\n                  location.pathname.includes(\r\n                    authRoutes.expense.links[props.lang]\r\n                  )\r\n                    ? expensesMenuActive\r\n                    : expensesMenu\r\n                }\r\n                alt={props.translate(\"expenses\")}\r\n              />\r\n              {props.translate(\"expenses\")}\r\n            </Link>\r\n            <a\r\n              className=\"border-top\"\r\n              href=\"https://app.monkmedical.com/doktor-ayarlari\"\r\n            >\r\n              <img\r\n                className=\"mh-24\"\r\n                src={doctor_settingsMenu}\r\n                alt={props.translate(\"doctor_settings\")}\r\n              />\r\n              {props.translate(\"doctor_settings\")}\r\n            </a>\r\n\r\n            <a href=\"https://app.monkmedical.com/sistem-ayarlari\">\r\n              <img\r\n                className=\"mh-24\"\r\n                src={system_settingsMenu}\r\n                alt={props.translate(\"system_settings\")}\r\n              />\r\n              {props.translate(\"system_settings\")}\r\n            </a>\r\n            <hr />\r\n            <a href=\"https://app.monkmedical.com/\">\r\n              <img\r\n                className=\"mh-18\"\r\n                src={clinicMenu}\r\n                alt={props.translate(\"clinic\")}\r\n              />\r\n              {props.translate(\"clinic\")}\r\n            </a>\r\n          </div>\r\n        )}\r\n        <div className=\"container-fluid\">\r\n          <Header\r\n            lang={props.lang}\r\n            user={props.user}\r\n            location={props.location}\r\n            translate={props.translate}\r\n            headerTitle={props.headerTitle}\r\n          />\r\n          <div id=\"main\">{props.children}</div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect()(withRouter(Layout));\r\n","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\utils\\LanguageFiles.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\utils\\API.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\App\\Router.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\rootReducer.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Auth\\authActions.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\App\\components\\Alert.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\App\\routes.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Auth\\authReducer.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\App\\appReducer.js",["170"],"import { alert } from \"./appActions\";\r\n\r\nconst initState = {\r\n  alert: {\r\n    type: \"\",\r\n    content: \"\",\r\n    timeout: 0,\r\n    isActive: false,\r\n  },\r\n  connection: \"\",\r\n  pageLoading: false,\r\n  headerTitle: ''\r\n};\r\n\r\nconst appReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case \"ALERT\": {\r\n      const alert = {\r\n        type: action.alertType,\r\n        title: action.title,\r\n        content: action.content,\r\n        timeout: action.timeout,\r\n        isActive: true,\r\n      };\r\n\r\n      const app = { ...state, alert };\r\n\r\n      return { ...app };\r\n    }\r\n\r\n    case \"RESET_ALERT\": {\r\n      const alert = {\r\n        type: \"\",\r\n        title: \"\",\r\n        content: \"\",\r\n        timeout: 0,\r\n        isActive: false,\r\n      };\r\n\r\n      const app = { ...state, alert };\r\n\r\n      return { ...app };\r\n    }\r\n\r\n    case 'PAGE_LOADING': {\r\n      return { ...state, pageLoading: action.pageLoading } \r\n    }\r\n\r\n    case 'HEADER_TITLE': {\r\n      return { ...state, headerTitle: action.headerTitle } \r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default appReducer;\r\n","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\NotFound\\NotFound.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\App\\Layout\\Header.js",["171"],"import React, { Component, createRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport avatar from '../../assets/images/avatar.svg'\r\nimport { logout, update } from \"../../Auth/authActions\";\r\nimport {\r\n  authRoutes,\r\n  globalRoutes,\r\n  guestRoutes,\r\n} from \"../routes\";\r\nimport { UserArea } from \"./components/UserArea\";\r\n\r\nconst allRoutes = {\r\n  ...globalRoutes,\r\n  ...guestRoutes,\r\n  ...authRoutes,\r\n};\r\n\r\nclass Header extends Component {\r\n  state = {\r\n    isProfilePopupOn: false,\r\n  };\r\n\r\n  profilePopupRef = createRef();\r\n\r\n  showProfilePopup = (e) => {\r\n    e.preventDefault();\r\n\r\n    this.setState(\r\n      (prevState) => {\r\n        return { isProfilePopupOn: !prevState.isProfilePopupOn };\r\n      },\r\n      () => {\r\n        document.addEventListener(\"click\", this.closeProfilePopup, false);\r\n      }\r\n    );\r\n  };\r\n\r\n  closeProfilePopup = (e) => {\r\n    if (e.target !== this.profilePopupRef.current) {\r\n      this.setState({ isProfilePopupOn: false }, () => {\r\n        document.removeEventListener(\"click\", this.closeProfilePopup, false);\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return this.props.user.isLoggedIn ? (\r\n      <div\r\n        className=\"header\"\r\n        data-alt={\r\n          this.props.location.pathname !==\r\n          guestRoutes.login.links[this.props.lang]\r\n        }\r\n      >\r\n        <div className=\"row\">\r\n          <div className=\"col-6 d-flex align-items-center\">\r\n            <p className='m-0'>{this.props.headerTitle}</p>\r\n          </div>\r\n          <div className=\"col-6 d-flex justify-content-end align-items-center\">\r\n            <span className=\"d-none d-md-flex\">\r\n              <UserArea\r\n                user={this.props.user}\r\n                isProfilePopupOn={this.state.isProfilePopupOn}\r\n                showProfilePopup={this.showProfilePopup}\r\n                logout={this.props.logout}\r\n                profilePopupRef={this.profilePopupRef}\r\n                lang={this.props.lang}\r\n                update={this.props.update}\r\n                avatar={avatar}\r\n              />\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <div></div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    logout: () => dispatch(logout()),\r\n    update: (user) => dispatch(update(user)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(withRouter(Header));\r\n","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Analysis\\Analysis.js",["172","173","174","175"],"import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport _ from 'lodash'\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport moment from \"moment\";\r\nimport API, { headers } from \"../utils/API\";\r\nimport { scrollToTop, currency, formatMoney } from \"../utils/helper\";\r\nimport InputWLabel from \"../utils/components/InputWLabel\";\r\n\r\nexport class Expense extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      processRows: [],\r\n      doctorRows: [],\r\n      startDate: '',\r\n      endDate: '',\r\n    }\r\n  }\r\n\r\n  \r\n  componentDidMount = () => {\r\n    scrollToTop();\r\n    setTimeout(() => {\r\n      this.props.headerTitleSet(this.props.translate('analyses'));\r\n    }, 400);\r\n    this.getData()\r\n  };\r\n\r\n  getData = ()=>{\r\n    // this.props.pageLoadingSet(true);\r\n    const startDate = this.state.startDate !== '' ? moment(this.state.startDate).format('YYYY-MM-DD') : ''\r\n    const endDate = this.state.endDate !== '' ? moment(this.state.endDate).format('YYYY-MM-DD') : ''\r\n    API.get(`/Dashboard/Analysis?startDate=${startDate}&endDate=${endDate}`, {\r\n      headers: { ...headers, Authorization: `Bearer ${this.props.user.token}`},\r\n    })\r\n      .then((res) => {\r\n        // this.props.pageLoadingSet(false);\r\n        const { data } = res;\r\n        this.setState({\r\n          processRows: data.processAnalyses,\r\n          doctorRows: data.doctorAnalyses\r\n        })\r\n      })\r\n      .catch((err) => {\r\n        // this.props.pageLoadingSet(false);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Payments\">\r\n        <div className=\"align-items-center justify-content-between mt-4 mb-4\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n              <DatePicker\r\n                selected={this.state.startDate}\r\n                onChange={(startDate) => {\r\n                  this.setState(\r\n                    {\r\n                      startDate: _.isNull(startDate) ? '' : startDate,\r\n                    },\r\n                    () => {\r\n                      this.getData();\r\n                    }\r\n                  );\r\n                }}\r\n                placeholderText=\"Başlangıç Tarihi\"\r\n                className=\"w-100 min\"\r\n              />\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <DatePicker\r\n                selected={this.state.endDate}\r\n                onChange={(endDate) => {\r\n                  this.setState(\r\n                    {\r\n                      endDate: _.isNull(endDate) ? '' : endDate,\r\n                    },\r\n                    () => {\r\n                      this.getData();\r\n                    }\r\n                  );\r\n                }}\r\n                placeholderText=\"Bitiş Tarihi\"\r\n                className=\"w-100 min\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n              <div className=\"react-infinite-table react-infinite-table-fill example-table rounded table-bordered \">\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-12\">\r\n                    <h3 className=\"w-100 p-3 pt-4\">Tedavilere Göre</h3>\r\n                  </div>\r\n                  <div className=\"col-md-12\">\r\n                    <table className=\"table table-striped\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th className=\"react-infinite-table-col-0\">\r\n                            Tedavi Adı\r\n                          </th>\r\n                          <th className=\"react-infinite-table-col-1 text-right\">\r\n                            Ciro\r\n                          </th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {this.state.processRows.map((i, index) => (\r\n                          <tr key={index + \"a\"} id={\"rowElement\" + i.processId}>\r\n                            <td className=\"react-infinite-table-col-0 pt-3 pb-3\">\r\n                              {i.process.name}\r\n                            </td>\r\n                            <td className=\"react-infinite-table-col-0 pt-3 pb-3 text-right\">\r\n                              {i.amount} TL\r\n                            </td>\r\n                          </tr>\r\n                        ))}\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <div className=\"react-infinite-table react-infinite-table-fill example-table rounded table-bordered \">\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-12\">\r\n                    <h3 className=\"w-100 p-3 pt-4\">Doktora Göre</h3>\r\n                  </div>\r\n                  <div className=\"col-md-12\">\r\n                    <table className=\"table table-striped\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th className=\"react-infinite-table-col-0\">\r\n                            Doktor Adı\r\n                          </th>\r\n                          <th className=\"react-infinite-table-col-1 text-right\">\r\n                            Ciro\r\n                          </th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {this.state.doctorRows.map((i, index) => (\r\n                          <tr key={index + \"a\"} id={\"rowElement\" + i.doctorId}>\r\n                            <td className=\"react-infinite-table-col-0 pt-3 pb-3\">\r\n                              {i.doctor.fullName}\r\n                            </td>\r\n                            <td className=\"react-infinite-table-col-0 pt-3 pb-3 text-right\">\r\n                              {i.amount} TL\r\n                            </td>\r\n                          </tr>\r\n                        ))}\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Expense\r\n","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Expense\\Expense.js",["176","177","178","179","180","181","182","183"],"import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport _ from \"lodash\";\r\nimport DatePicker, { registerLocale, setDefaultLocale } from \"react-datepicker\";\r\nimport tr from \"date-fns/locale/tr\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport moment from \"moment\";\r\nimport API, { headers } from \"../utils/API\";\r\nimport { scrollToTop, currency, formatMoney } from \"../utils/helper\";\r\nimport InputWLabel from \"../utils/components/InputWLabel\";\r\nimport { authRoutes } from \"../App/routes\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nregisterLocale(\"tr\", tr);\r\n\r\nexport class Expense extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      rows: [],\r\n      hasMore: false,\r\n      length: 10,\r\n      currentpage: 1,\r\n      search: \"\",\r\n      startDate: \"\",\r\n      endDate: \"\",\r\n      totalExpense: \"0\",\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    scrollToTop();\r\n    setTimeout(() => {\r\n      this.props.headerTitleSet(this.props.translate(\"expenses\"));\r\n    }, 400);\r\n    this.getData();\r\n  };\r\n\r\n  getData = (type = \"empty\") => {\r\n    // this.props.pageLoadingSet(true);\r\n    const startDate =\r\n      this.state.startDate !== \"\"\r\n        ? moment(this.state.startDate).format(\"YYYY-MM-DD\")\r\n        : \"\";\r\n    const endDate =\r\n      this.state.endDate !== \"\"\r\n        ? moment(this.state.endDate).format(\"YYYY-MM-DD\")\r\n        : \"\";\r\n    API.get(\r\n      `Expense/List?searchBy=${this.state.search}&startDate=${startDate}&endDate=${endDate}&page=${this.state.currentpage}`,\r\n      {\r\n        headers: {\r\n          ...headers,\r\n          Authorization: `Bearer ${this.props.user.token}`,\r\n          page: this.state.currentpage,\r\n        },\r\n      }\r\n    )\r\n      .then((res) => {\r\n        // this.props.pageLoadingSet(false);\r\n        const { data } = res;\r\n        const rows = type !== \"add\" ? [] : this.state.rows;\r\n        if (type !== \"add\") {\r\n          this.setState({\r\n            currentpage: 1,\r\n          });\r\n        }\r\n        console.log(data.totalPages, this.state.currentpage + 1);\r\n        data.data.map((e) => {\r\n          rows.push({\r\n            amount: e.amount,\r\n            clinicId: e.clinicId,\r\n            createDate: e.date,\r\n            currency: e.currency,\r\n            description: e.description,\r\n            id: e.id,\r\n            disabled: true,\r\n            type: \"\",\r\n          });\r\n        });\r\n        this.setState({\r\n          currentpage: this.state.currentpage + 1,\r\n          rows: rows,\r\n          hasMore: data.totalPages >= this.state.currentpage + 1,\r\n          totalExpense: data.totalExpense,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        // this.props.pageLoadingSet(false);\r\n      });\r\n  };\r\n  handleChange = (e, index) => {\r\n    const arr = this.state.rows;\r\n    if (!_.isUndefined(e.target)) {\r\n      if (e.target.name.includes(\"gider\")) {\r\n        arr[index].description = e.target.value;\r\n      } else if (e.target.name.includes(\"tutar\")) {\r\n        arr[index].amount = e.target.value;\r\n      }\r\n    } else {\r\n      arr[index].createDate = e;\r\n    }\r\n\r\n    this.setState({\r\n      rows: arr,\r\n    });\r\n  };\r\n  addRow = () => {\r\n    const arr = this.state.rows;\r\n    arr.unshift({\r\n      amount: \"\",\r\n      createDate: new Date(),\r\n      description: \"\",\r\n      disabled: false,\r\n      type: \"new\",\r\n    });\r\n    this.setState({\r\n      rows: arr,\r\n    });\r\n    console.log(this.state.rows);\r\n  };\r\n  editRow = (x, i) => {\r\n    const arr = this.state.rows;\r\n    arr[i].disabled = false;\r\n    this.setState({\r\n      rows: arr,\r\n    });\r\n  };\r\n  editRowSave = (x, i) => {\r\n    const data = {\r\n      id: this.state.rows[i].id,\r\n      clinicId: this.state.rows[i].clinicId,\r\n      description: this.state.rows[i].description,\r\n      date: moment(this.state.rows[i].createDate).format(),\r\n      amount: _.isNaN(parseFloat(this.state.rows[i].amount))\r\n        ? \"\"\r\n        : parseFloat(this.state.rows[i].amount),\r\n      currency: this.state.rows[i].currency,\r\n    };\r\n\r\n    if (\r\n      data.createDate !== \"\" &&\r\n      data.description !== \"\" &&\r\n      data.amount !== \"\"\r\n    ) {\r\n      this.props.pageLoadingSet(true);\r\n      this.setState(\r\n        {\r\n          rows: [],\r\n        },\r\n        () => {\r\n          API.post(\"Expense\", data, {\r\n            headers: {\r\n              ...headers,\r\n              Authorization: `Bearer ${this.props.user.token}`,\r\n            },\r\n          })\r\n            .then((res) => {\r\n              this.props.pageLoadingSet(false);\r\n              const oldData = this.state.rows;\r\n              oldData.splice(i, 1);\r\n              this.setState({\r\n                rows: oldData,\r\n              });\r\n              this.getData();\r\n            })\r\n            .catch((err) => {\r\n              this.props.pageLoadingSet(false);\r\n              this.setState({ isSending: false });\r\n            });\r\n        }\r\n      );\r\n    } else {\r\n      alert(\"Lütfen gerekli alanları doldurunuz.\");\r\n    }\r\n  };\r\n\r\n  delete = (i) => {\r\n    console.log(this.state.rows);\r\n    const id = this.state.rows[i].id;\r\n    const arr = this.state.rows;\r\n    if (this.state.rows[i].type === \"new\") {\r\n      arr.splice(i, 1);\r\n      this.setState({\r\n        rows: arr,\r\n      });\r\n    } else {\r\n      this.props.pageLoadingSet(true);\r\n      API.delete(`Expense?expenseId=${id}`, {\r\n        headers: {\r\n          ...headers,\r\n          Authorization: `Bearer ${this.props.user.token}`,\r\n        },\r\n      })\r\n        .then((res) => {\r\n          this.setState(\r\n            {\r\n              rows: [],\r\n            },\r\n            () => {\r\n              this.getData();\r\n            }\r\n          );\r\n          this.props.pageLoadingSet(false);\r\n        })\r\n        .catch((err) => {\r\n          this.props.pageLoadingSet(false);\r\n        });\r\n    }\r\n  };\r\n\r\n  timeout = \"\";\r\n  search = (e) => {\r\n    const { value } = e.target;\r\n    clearTimeout(this.timeout);\r\n\r\n    this.setState(\r\n      {\r\n        rows: [],\r\n        search: value,\r\n        currentpage: 1,\r\n      },\r\n      () => {\r\n        this.timeout = setTimeout(() => {\r\n          this.getData();\r\n        }, 500);\r\n      }\r\n    );\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"Payments\">\r\n        <div className=\"align-items-center justify-content-between mt-4 mb-4\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-3\">\r\n              <a\r\n                className=\"primary-button d-inline-flex cursor-pointer\"\r\n                onClick={() => {\r\n                  this.addRow();\r\n                }}\r\n              >\r\n                Yeni Gider Ekle\r\n              </a>\r\n            </div>\r\n            <div className=\"col-md-9\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                  <DatePicker\r\n                    selected={this.state.startDate}\r\n                    onChange={(startDate) => {\r\n                      this.setState(\r\n                        {\r\n                          startDate: _.isNull(startDate) ? \"\" : startDate,\r\n                        },\r\n                        () => {\r\n                          this.getData();\r\n                        }\r\n                      );\r\n                    }}\r\n                    placeholderText=\"Başlangıç Tarihi\"\r\n                    className=\"w-100\"\r\n                  />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                  <DatePicker\r\n                    selected={this.state.endDate}\r\n                    onChange={(endDate) => {\r\n                      this.setState(\r\n                        {\r\n                          endDate: _.isNull(endDate) ? \"\" : endDate,\r\n                        },\r\n                        () => {\r\n                          this.getData();\r\n                        }\r\n                      );\r\n                    }}\r\n                    placeholderText=\"Bitiş Tarihi\"\r\n                    className=\"w-100\"\r\n                  />\r\n                </div>\r\n                <div className=\"col-md-4 d-flex justify-content-end\">\r\n                  <InputWLabel\r\n                    name=\"search\"\r\n                    type=\"searchT\"\r\n                    classes=\"mb-0 w-100\"\r\n                    id=\"search\"\r\n                    value={this.state.search}\r\n                    setValue={this.search}\r\n                    tabIndex={1}\r\n                    label=\"\"\r\n                    placeholder=\"Ara\"\r\n                    icon={\r\n                      <svg\r\n                        width=\"20\"\r\n                        height=\"20\"\r\n                        viewBox=\"0 0 20 20\"\r\n                        fill=\"none\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                      >\r\n                        <path\r\n                          d=\"M19.6672 18.1075L14.7625 13.1963C17.2288 9.98675 16.9826 5.34958 14.0229 2.41441C12.4065 0.796245 10.3234 0 8.21364 0C6.10387 0 4.02067 0.795147 2.40443 2.41441C-0.801477 5.62392 -0.801477 10.8364 2.40443 14.0459C4.02078 15.6641 6.10387 16.4603 8.21364 16.4603C9.96701 16.4603 11.7215 15.9116 13.1742 14.7864L18.1057 19.671C18.3251 19.8907 18.5991 20 18.8999 20C19.174 20 19.4758 19.8907 19.6942 19.671C20.1063 19.2595 20.1063 18.5458 19.6674 18.1075H19.6672ZM8.24028 14.2387C6.62393 14.2387 5.14344 13.6075 3.99278 12.4834C1.6635 10.1515 1.6635 6.33874 3.99278 3.97886C5.11675 2.85363 6.62393 2.22353 8.24028 2.22353C9.85663 2.22353 11.3371 2.85473 12.4878 3.97886C13.6385 5.1041 14.2412 6.61297 14.2412 8.23114C14.2412 9.84931 13.6107 11.3315 12.4878 12.4834C11.3638 13.6354 9.82989 14.2387 8.24028 14.2387Z\"\r\n                          fill=\"#474555\"\r\n                        />\r\n                      </svg>\r\n                    }\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <InfiniteScroll\r\n            dataLength={this.state.rows.length}\r\n            next={() => this.getData(\"add\")}\r\n            hasMore={this.state.hasMore}\r\n            loader={\r\n              <tr>\r\n                <td>...</td>\r\n              </tr>\r\n            }\r\n            height={600}\r\n            endMessage={\r\n              <p style={{ textAlign: \"center\" }}>\r\n                {/*<b>Yay! You have seen it all</b>*/}\r\n              </p>\r\n            }\r\n          >\r\n            <div className=\"react-infinite-table react-infinite-table-fill example-table\">\r\n              <table className=\"table table-bordered table-striped\">\r\n                <thead>\r\n                  <tr>\r\n                    <th className=\"react-infinite-table-col-0\">Tarih</th>\r\n                    <th className=\"react-infinite-table-col-1\">Gider İsmi</th>\r\n                    <th className=\"react-infinite-table-col-2\">Tutar</th>\r\n                    <th className=\"react-infinite-table-col-4\"></th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {this.state.rows.map((i, index) => (\r\n                    <tr key={index + \"a\"} id={\"rowElement\" + i.id}>\r\n                      <td className=\"react-infinite-table-col-0 pt-3 pb-3\">\r\n                        <DatePicker\r\n                          selected={new Date(i.createDate)}\r\n                          onChange={(date) => {\r\n                            this.handleChange(date, index);\r\n                          }}\r\n                          placeholderText=\"Başlangıç Tarihi\"\r\n                          className=\"w-100 min\"\r\n                          showTimeSelect\r\n                          locale=\"tr\"\r\n                          dateFormat=\"d MMMM yyyy h:mm\"\r\n                          disabled={i.disabled}\r\n                        />\r\n                      </td>\r\n                      <td className=\"react-infinite-table-col-1 pt-2 pb-2\">\r\n                        <InputWLabel\r\n                          name={`gider${index}`}\r\n                          type=\"text\"\r\n                          classes={`mb-0 mw-300 w-100 min ${\r\n                            i.disabled ? \"disabled\" : \"\"\r\n                          }`}\r\n                          value={i.description}\r\n                          tabIndex={1}\r\n                          label=\"\"\r\n                          disabled={i.disabled}\r\n                          setValue={(e) => this.handleChange(e, index)}\r\n                        />\r\n                      </td>\r\n                      <td className=\"react-infinite-table-col-1 pt-2 pb-2\">\r\n                        <InputWLabel\r\n                          name={`tutar${index}`}\r\n                          type=\"text\"\r\n                          classes={`mb-0 mw-300 w-100 min ${\r\n                            i.disabled ? \"disabled\" : \"\"\r\n                          }`}\r\n                          value={\r\n                            i.disabled\r\n                              ? formatMoney(i.amount) +\r\n                                \" \" +\r\n                                currency(i.currency)\r\n                              : i.amount\r\n                          }\r\n                          tabIndex={1}\r\n                          label=\"\"\r\n                          disabled={i.disabled}\r\n                          setValue={(e) => this.handleChange(e, index)}\r\n                        />\r\n                      </td>\r\n                      <td className=\"react-infinite-table-col-4 text-right pt-2 pb-2\">\r\n                        {i.disabled ? (\r\n                          <a\r\n                            className=\"d-inline-flex align-items-center text-blue pl-3 pr-3 cursor-pointer\"\r\n                            onClick={(e) => {\r\n                              this.editRow(i, index);\r\n                            }}\r\n                          >\r\n                            Düzenle\r\n                          </a>\r\n                        ) : (\r\n                          <a\r\n                            className=\"d-inline-flex align-items-center text-blue pl-3 pr-3 cursor-pointer\"\r\n                            onClick={(e) => {\r\n                              this.editRowSave(i, index);\r\n                            }}\r\n                          >\r\n                            Kaydet\r\n                          </a>\r\n                        )}\r\n                        <a\r\n                          className=\"d-inline-flex align-items-center text-pink pl-3 pr-3 cursor-pointer\"\r\n                          onClick={(e) => {\r\n                            this.delete(index);\r\n                          }}\r\n                        >\r\n                          Sil\r\n                        </a>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </InfiniteScroll>\r\n        </div>\r\n        <p className=\"mt-3 text-right\">\r\n          <b>Toplam Gider: {this.state.totalExpense}</b>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Expense;\r\n","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\UserDetail\\UserDetail.js",["184"],"import _ from \"lodash\";\r\nimport React, { Component } from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport { authRoutes } from \"../App/routes\";\r\nimport deleteIcon from \"../assets/images/delete-icon.svg\";\r\nimport editIcon from \"../assets/images/edit-icon.svg\";\r\nimport API, { headers } from \"../utils/API\";\r\nimport { formatMoney, scrollToTop } from \"../utils/helper\";\r\n\r\nexport class UserDetail extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      tckn: \"\",\r\n      passionNo: \"\",\r\n      phone: \"\",\r\n      email: \"\",\r\n      balance: \"\",\r\n      yapilanIslemler: [],\r\n      yapilanIslemlerToplam: 0,\r\n      islemGecmisi: [],\r\n      islemGecmisiToplam: 0,\r\n      hasMore1: false,\r\n      hasMore2: false,\r\n      length1: 10,\r\n      length2: 10,\r\n      currentpage1: 1,\r\n      currentpage2: 1,\r\n    };\r\n  }\r\n  componentDidMount = () => {\r\n    scrollToTop();\r\n\r\n    this.getData();\r\n  };\r\n  getData = () => {\r\n    if (\r\n      this.props.match.params.id !== \"\" &&\r\n      !_.isUndefined(this.props.match.params.id)\r\n    ) {\r\n      this.props.pageLoadingSet(true);\r\n\r\n      API.get(`Account/GetById?id=${this.props.match.params.id}`, {\r\n        headers: {\r\n          ...headers,\r\n          Authorization: `Bearer ${this.props.user.token}`,\r\n        },\r\n      })\r\n        .then((res) => {\r\n          const { user } = res.data;\r\n          this.setState({\r\n            name: user.fullName,\r\n            tckn: user.identityNumber,\r\n            passionNo: user.id,\r\n            phone: user.phoneNumber,\r\n            email: user.email,\r\n          });\r\n          this.props.pageLoadingSet(false);\r\n        })\r\n        .catch((err) => {\r\n          // alert(err.response.data.value)\r\n          this.props.pageLoadingSet(false);\r\n        });\r\n\r\n      API.get(`Dashboard/Home?passionId=${this.props.match.params.id}`, {\r\n        headers: {\r\n          ...headers,\r\n          Authorization: `Bearer ${this.props.user.token}`,\r\n        },\r\n      })\r\n        .then((res) => {\r\n          const { creditTotal, debtTotal, list } = res.data;\r\n          const yapilanIslemler = [];\r\n          let yapilanIslemlerToplam = 0;\r\n          const islemGecmisi = [];\r\n          let islemGecmisiToplam = 0;\r\n          list.map((e) => {\r\n            if (e.paymentType === 0) {\r\n              islemGecmisi.push({\r\n                description: e.description,\r\n                price: e.amount,\r\n                doctorId: e.doctorId,\r\n                userId: e.userId,\r\n                id: e.id,\r\n                date: moment(e.date).format(\"YYYY-MM-DD\"),\r\n              });\r\n              islemGecmisiToplam = islemGecmisiToplam + e.amount;\r\n            } else {\r\n              yapilanIslemler.push({\r\n                description: e.description,\r\n                price: e.amount,\r\n                doctorId: e.doctorId,\r\n                userId: e.userId,\r\n                id: e.id,\r\n                date: moment(e.date).format(\"YYYY-MM-DD\"),\r\n              });\r\n              yapilanIslemlerToplam = yapilanIslemlerToplam + e.amount;\r\n            }\r\n          });\r\n          this.setState({\r\n            balance: debtTotal - creditTotal,\r\n            islemGecmisi,\r\n            islemGecmisiToplam: debtTotal,\r\n            yapilanIslemler,\r\n            yapilanIslemlerToplam: creditTotal,\r\n          });\r\n          this.props.pageLoadingSet(false);\r\n        })\r\n        .catch((err) => {\r\n          // alert(err.response.data.value)\r\n          this.props.pageLoadingSet(false);\r\n        });\r\n    }\r\n  };\r\n\r\n  payDelete = (id) => {\r\n    this.props.pageLoadingSet(true);\r\n    API.delete(`Payment?paymentId=${id}`, {\r\n      headers: {\r\n        ...headers,\r\n        Authorization: `Bearer ${this.props.user.token}`,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        this.getData();\r\n        this.props.pageLoadingSet(false);\r\n      })\r\n      .catch((err) => {\r\n        this.props.pageLoadingSet(false);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Payments\">\r\n        <div className=\"row pt-4\">\r\n          <div className=\"col-md-4 mb-4\">\r\n            <div className=\"border-radius border rounded\">\r\n              <div className=\"card-title\">Hasta Kartı</div>\r\n              <div className=\"card-body\">\r\n                <p>\r\n                  {this.state.name}\r\n                  <br />\r\n                  T.C. : {this.state.tckn}\r\n                </p>\r\n                <p>\r\n                  Hasta No:\r\n                  <br />\r\n                  {this.state.passionNo}\r\n                </p>\r\n                <p>\r\n                  Telefon:\r\n                  <br /> {this.state.phone}\r\n                </p>\r\n                <p>\r\n                  E-posta:\r\n                  <br />\r\n                  {this.state.email}\r\n                </p>\r\n                <div className=\"card-balance\">\r\n                  <p className=\"text-white p-0 m-0 font-weight-bold fs-16\">\r\n                    {formatMoney(this.state.balance) + \" TL\"}\r\n                  </p>\r\n                  <span className=\"text-white fs-12\">Bakiye</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4 mb-4\">\r\n            <InfiniteScroll\r\n              dataLength={this.state.islemGecmisi.length}\r\n              next={this.getData}\r\n              hasMore={this.state.hasMore1}\r\n              loader={\r\n                <tr>\r\n                  <td>...</td>\r\n                </tr>\r\n              }\r\n              height={385}\r\n              endMessage={\r\n                <p style={{ textAlign: \"center\" }}>\r\n                  {/*<b>Yay! You have seen it all</b>*/}\r\n                </p>\r\n              }\r\n            >\r\n              <div className=\"react-infinite-table react-infinite-table-fill example-table\">\r\n                <table className=\"table table-bordered table-striped\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th className=\"react-infinite-table-col-0\">\r\n                        Yapılan İşlemler\r\n                      </th>\r\n                      <th className=\"react-infinite-table-col-1\">Tarih</th>\r\n                      <th className=\"react-infinite-table-col-2 text-right\">\r\n                        Toplam : {formatMoney(this.state.islemGecmisiToplam)} TL\r\n                      </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {this.state.islemGecmisi.map((i, index) => (\r\n                      <tr key={index + \"a\"}>\r\n                        {console.log(i)}\r\n                        <td className=\"react-infinite-table-col-0\">\r\n                          {i.description}\r\n                        </td>\r\n                        <td className=\"react-infinite-table-col-1\">{i.date}</td>\r\n                        <td\r\n                          className=\"react-infinite-table-col-2\"\r\n                          align=\"right\"\r\n                        >\r\n                          {formatMoney(i.price)} TL\r\n                          <Dropdown className=\"float-right dropdown-min\">\r\n                            <Dropdown.Toggle></Dropdown.Toggle>\r\n                            <Dropdown.Menu>\r\n                              <Dropdown.Item\r\n                                onClick={() =>\r\n                                  this.props.history.push(\r\n                                    authRoutes.editPaid.links[this.props.lang]\r\n                                      .replace(\r\n                                        \":id\",\r\n                                        this.props.match.params.id\r\n                                      )\r\n                                      .replace(\":paid\", i.id)\r\n                                  )\r\n                                }\r\n                              >\r\n                                <img src={editIcon} alt=\"\" className=\"mr-2\" />{\" \"}\r\n                                Düzenle\r\n                              </Dropdown.Item>\r\n                              <Dropdown.Item\r\n                                onClick={() => {\r\n                                  this.payDelete(i.id);\r\n                                }}\r\n                              >\r\n                                <img src={deleteIcon} alt=\"\" className=\"mr-2\" />{\" \"}\r\n                                Sil\r\n                              </Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                          </Dropdown>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </InfiniteScroll>\r\n            <Link\r\n              className=\"primary-button d-inline-flex mt-3\"\r\n              to={authRoutes.addTreatment.links[this.props.lang].replace(\r\n                \":id\",\r\n                this.props.match.params.id\r\n              )}\r\n            >\r\n              Tedavi Ekle\r\n            </Link>\r\n          </div>\r\n          <div className=\"col-md-4 mb-4\">\r\n            <InfiniteScroll\r\n              dataLength={this.state.yapilanIslemler.length}\r\n              next={this.getData}\r\n              hasMore={this.state.hasMore2}\r\n              loader={\r\n                <tr>\r\n                  <td>...</td>\r\n                </tr>\r\n              }\r\n              height={385}\r\n              endMessage={\r\n                <p style={{ textAlign: \"center\" }}>\r\n                  {/*<b>Yay! You have seen it all</b>*/}\r\n                </p>\r\n              }\r\n            >\r\n              <div className=\"react-infinite-table react-infinite-table-fill example-table\">\r\n                <table className=\"table table-bordered table-striped\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th className=\"react-infinite-table-col-0\">\r\n                        Ödeme Geçmisi\r\n                      </th>\r\n                      <th className=\"react-infinite-table-col-1\">Tarih</th>\r\n                      <th className=\"react-infinite-table-col-2 text-right\">\r\n                        Toplam : {formatMoney(this.state.yapilanIslemlerToplam)}{\" \"}\r\n                        TL\r\n                      </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {this.state.yapilanIslemler.map((i, index) => (\r\n                      <tr key={index + \"a\"}>\r\n                        <td className=\"react-infinite-table-col-0\">\r\n                          {i.description}\r\n                        </td>\r\n                        <td className=\"react-infinite-table-col-1\">{i.date}</td>\r\n                        <td\r\n                          className=\"react-infinite-table-col-2\"\r\n                          align=\"right\"\r\n                        >\r\n                          {formatMoney(i.price)} TL\r\n                          <Dropdown className=\"float-right dropdown-min\">\r\n                            <Dropdown.Toggle></Dropdown.Toggle>\r\n                            <Dropdown.Menu>\r\n                              <Dropdown.Item\r\n                                onClick={() =>\r\n                                  this.props.history.push(\r\n                                    authRoutes.editPaid.links[this.props.lang]\r\n                                      .replace(\r\n                                        \":id\",\r\n                                        this.props.match.params.id\r\n                                      )\r\n                                      .replace(\":paid\", i.id)\r\n                                  )\r\n                                }\r\n                              >\r\n                                <img src={editIcon} alt=\"\" className=\"mr-2\" />{\" \"}\r\n                                Düzenle\r\n                              </Dropdown.Item>\r\n                              <Dropdown.Item\r\n                                onClick={() => {\r\n                                  this.payDelete(i.id);\r\n                                }}\r\n                              >\r\n                                <img src={deleteIcon} alt=\"\" className=\"mr-2\" />{\" \"}\r\n                                Sil\r\n                              </Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                          </Dropdown>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </InfiniteScroll>\r\n            <Link\r\n              className=\"primary-button d-inline-flex mt-3\"\r\n              to={authRoutes.addPaid.links[this.props.lang].replace(\r\n                \":id\",\r\n                this.props.match.params.id\r\n              )}\r\n            >\r\n              Ödeme Al\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserDetail;\r\n","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\CreatePaid\\CreatePaid.js",["185","186"],"import _ from \"lodash\";\r\nimport moment from \"moment\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport React, { Component } from \"react\";\r\nimport { alert } from \"../App/appActions\";\r\nimport { authRoutes } from \"../App/routes\";\r\nimport API, { headers } from \"../utils/API\";\r\nimport InputWLabel from \"../utils/components/InputWLabel\";\r\nimport SelectWLabel from \"../utils/components/SelectWLabel\";\r\nimport { formatMoney, scrollToTop } from \"../utils/helper\";\r\nexport class CreatePaid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      processList: [],\r\n      doctorList: [],\r\n      selectedProcess: [],\r\n      selectedDoctor: [],\r\n      total: \"\",\r\n      totalError: \"\",\r\n      selectedProcessError: \"\",\r\n      selectedDoctorError: \"\",\r\n      discountNumber: \"\",\r\n      discountResult: \"\",\r\n      alinanMiktar: \"\",\r\n      alinanMiktarView: false,\r\n      balance: 0,\r\n      discountType: \"rate\",\r\n      editable: true,\r\n      date: \"\",\r\n      date2: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    scrollToTop();\r\n    setTimeout(() => {\r\n      this.props.headerTitleSet(this.props.translate(\"payments\"));\r\n    }, 400);\r\n    this.getData();\r\n    if (\r\n      this.props.match.url ===\r\n      authRoutes.addPaid.links[this.props.lang].replace(\r\n        \":id\",\r\n        this.props.match.params.id\r\n      )\r\n    ) {\r\n      this.setState({ alinanMiktarView: true });\r\n    }\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this._loadRowsTimeout);\r\n  }\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    this.setState({ [name]: value }, () => {\r\n      if (name === \"discountNumber\" || name === \"total\") {\r\n        if (this.state.total !== \"\" || this.state.discountNumber !== \"\") {\r\n          if (this.state.discountType === \"rate\") {\r\n            if (\r\n              Number(this.state.total) >=\r\n              Number(this.state.total) * Number(this.state.discountNumber / 100)\r\n            ) {\r\n              this.setState({\r\n                discountResult:\r\n                  Number(this.state.total) -\r\n                  Number(this.state.total) *\r\n                    Number(this.state.discountNumber / 100),\r\n              });\r\n            } else {\r\n              this.setState({\r\n                discountNumber: \"\",\r\n              });\r\n            }\r\n          } else {\r\n            console.log(\r\n              Number(this.state.total) - Number(this.state.discountNumber)\r\n            );\r\n            if (\r\n              Number(this.state.total) - Number(this.state.discountNumber) >=\r\n              0\r\n            ) {\r\n              this.setState({\r\n                discountResult:\r\n                  Number(this.state.total) - Number(this.state.discountNumber),\r\n              });\r\n            } else {\r\n              this.setState({\r\n                discountNumber: \"\",\r\n              });\r\n            }\r\n          }\r\n        } else {\r\n          this.setState({\r\n            discountResult: \"\",\r\n          });\r\n        }\r\n      }\r\n    });\r\n  };\r\n  getData = () => {\r\n    API.get(`Diagnose/ListPrice?length=1000`, {\r\n      headers: {\r\n        ...headers,\r\n        Authorization: `Bearer ${this.props.user.token}`,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        const processList = [];\r\n        res.data.data.map((e) => {\r\n          processList.push({\r\n            id: e.diagnose.id,\r\n            label: e.diagnose.name,\r\n            price: e.price,\r\n          });\r\n        });\r\n        this.setState(\r\n          {\r\n            processList,\r\n          },\r\n          () => {\r\n            if (\r\n              this.props.match.params.paid !== \"\" &&\r\n              !_.isUndefined(this.props.match.params.paid)\r\n            ) {\r\n              this.editOnly();\r\n            }\r\n          }\r\n        );\r\n\r\n        this.props.pageLoadingSet(false);\r\n      })\r\n      .catch((err) => {\r\n        // alert(err.response.data.value)\r\n        this.props.pageLoadingSet(false);\r\n      });\r\n    API.get(`Account/ListAllDoctors?length=1000`, {\r\n      headers: {\r\n        ...headers,\r\n        Authorization: `Bearer ${this.props.user.token}`,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        const doctorList = [];\r\n        res.data.data.map((e) => {\r\n          doctorList.push({\r\n            id: e.user.id,\r\n            label: e.user.fullName,\r\n          });\r\n        });\r\n        this.setState({\r\n          doctorList,\r\n        });\r\n        this.props.pageLoadingSet(false);\r\n      })\r\n      .catch((err) => {\r\n        // alert(err.response.data.value)\r\n        this.props.pageLoadingSet(false);\r\n      });\r\n\r\n    if (\r\n      this.props.match.params.id !== \"\" &&\r\n      !_.isUndefined(this.props.match.params.id)\r\n    ) {\r\n      this.props.pageLoadingSet(true);\r\n\r\n      API.get(`Account/GetById?id=${this.props.match.params.id}`, {\r\n        headers: {\r\n          ...headers,\r\n          Authorization: `Bearer ${this.props.user.token}`,\r\n        },\r\n      })\r\n        .then((res) => {\r\n          const { user } = res.data;\r\n          this.setState({\r\n            name: user.fullName,\r\n            tckn: user.identityNumber,\r\n            passionNo: user.id,\r\n            phone: user.phoneNumber,\r\n            email: user.email,\r\n          });\r\n          this.props.pageLoadingSet(false);\r\n        })\r\n        .catch((err) => {\r\n          // alert(err.response.data.value)\r\n          this.props.pageLoadingSet(false);\r\n        });\r\n      API.get(`Dashboard/Home?passionId=${this.props.match.params.id}`, {\r\n        headers: {\r\n          ...headers,\r\n          Authorization: `Bearer ${this.props.user.token}`,\r\n        },\r\n      })\r\n        .then((res) => {\r\n          const { creditTotal, debtTotal } = res.data;\r\n          this.setState({\r\n            balance: debtTotal - creditTotal,\r\n          });\r\n          this.props.pageLoadingSet(false);\r\n        })\r\n        .catch((err) => {\r\n          this.props.pageLoadingSet(false);\r\n        });\r\n    }\r\n  };\r\n  search = (nameKey, myArray) => {\r\n    for (var i = 0; i < myArray.length; i++) {\r\n      if (myArray[i].id === nameKey) {\r\n        return myArray[i];\r\n      }\r\n    }\r\n  };\r\n\r\n  editOnly = () => {\r\n    this.props.pageLoadingSet(true);\r\n    API.get(`Payment/GetById?id=${this.props.match.params.paid}`, {\r\n      headers: {\r\n        ...headers,\r\n        Authorization: `Bearer ${this.props.user.token}`,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        const process = this.search(res.data.processId, this.state.processList);\r\n\r\n        this.setState({\r\n          alinanMiktarView: res.data.paymentType === 10,\r\n          total: res.data.price,\r\n          discountNumber:\r\n            res.data.discountRate === 0\r\n              ? res.data.price - res.data.amount > 0\r\n                ? res.data.price - res.data.amount\r\n                : \"\"\r\n              : res.data.discountRate,\r\n          discountResult:\r\n            res.data.price === res.data.amount ? \"\" : res.data.amount,\r\n          alinanMiktar: res.data.amount,\r\n          selectedProcess: [process],\r\n          selectedDoctor:\r\n            res.data.doctor !== null\r\n              ? [{ id: res.data.doctor.id, label: res.data.doctor.fullName }]\r\n              : [],\r\n          discountType: res.data.discountRate > 0 ? \"rate\" : \"amount\",\r\n        });\r\n        this.props.pageLoadingSet(false);\r\n      })\r\n      .catch((err) => {\r\n        this.props.pageLoadingSet(false);\r\n      });\r\n  };\r\n\r\n  postData = (q, r) => {\r\n    const {\r\n      total,\r\n      discountNumber,\r\n      selectedProcess,\r\n      selectedDoctor,\r\n      alinanMiktar,\r\n      discountType,\r\n      date,\r\n      date2,\r\n    } = this.state;\r\n    this.setState(\r\n      {\r\n        totalError: total === \"\" ? \"Toplam fatura tutarını giriniz\" : \"\",\r\n        selectedProcessError:\r\n          selectedProcess.length === 0 ? \"Lütfen tedavi adını giriniz\" : \"\",\r\n        selectedDoctorError:\r\n          selectedDoctor.length === 0 ? \"Lütfen doktor adını giriniz\" : \"\",\r\n      },\r\n      () => {\r\n        const { totalError, selectedProcessError, selectedDoctorError } =\r\n          this.state;\r\n        if (q !== \"miktar\") {\r\n          if (\r\n            totalError === \"\" &&\r\n            selectedProcessError === \"\" &&\r\n            selectedDoctorError === \"\"\r\n          ) {\r\n            const data = {\r\n              userId: this.props.match.params.id,\r\n              price: parseFloat(total),\r\n              discountRate:\r\n                discountNumber === \"\" || discountType !== \"rate\"\r\n                  ? 0\r\n                  : parseFloat(discountNumber),\r\n              amount:\r\n                discountNumber === \"\" || discountType === \"rate\"\r\n                  ? 0\r\n                  : parseFloat(discountNumber),\r\n              createDate:\r\n                this.state.date !== \"\"\r\n                  ? moment(date).format(\"YYYY-MM-DD\")\r\n                  : moment().format(\"YYYY-MM-DD\"),\r\n              processId: parseInt(selectedProcess[0].id),\r\n              paymentType: 0,\r\n              doctorId: selectedDoctor[0].id,\r\n            };\r\n\r\n            if (\r\n              this.props.match.params.paid !== \"\" &&\r\n              !_.isUndefined(this.props.match.params.paid)\r\n            ) {\r\n              data.id = parseInt(this.props.match.params.paid);\r\n            }\r\n            this.props.pageLoadingSet(true);\r\n            API.post(\"Payment\", data, {\r\n              headers: {\r\n                ...headers,\r\n                Authorization: `Bearer ${this.props.user.token}`,\r\n              },\r\n            })\r\n              .then((res) => {\r\n                this.props.pageLoadingSet(false);\r\n                if (r === \"next\") {\r\n                  this.setState({\r\n                    alinanMiktarView: true,\r\n                  });\r\n                } else {\r\n                  this.props.history.push(\r\n                    authRoutes.userDetail.links[this.props.lang].replace(\r\n                      \":id\",\r\n                      this.props.match.params.id\r\n                    )\r\n                  );\r\n                }\r\n              })\r\n              .catch((err) => {\r\n                this.props.pageLoadingSet(false);\r\n                this.setState({ isSending: false });\r\n              });\r\n          }\r\n        } else {\r\n          const data = {\r\n            userId: this.props.match.params.id,\r\n            price: parseFloat(alinanMiktar),\r\n            discountRate: 0,\r\n            createDate:\r\n              this.state.date2 !== \"\"\r\n                ? moment(date2).format(\"YYYY-MM-DD\")\r\n                : moment().format(\"YYYY-MM-DD\"),\r\n            processId: 0,\r\n            paymentType: 10,\r\n            doctorId: \"\",\r\n            description: \"Ödeme alındı\",\r\n          };\r\n          this.props.pageLoadingSet(true);\r\n          API.post(\"Payment\", data, {\r\n            headers: {\r\n              ...headers,\r\n              Authorization: `Bearer ${this.props.user.token}`,\r\n            },\r\n          })\r\n            .then((res) => {\r\n              alert(12312);\r\n              this.props.pageLoadingSet(false);\r\n              this.props.history.push(\r\n                authRoutes.userDetail.links[this.props.lang].replace(\r\n                  \":id\",\r\n                  this.props.match.params.id\r\n                )\r\n              );\r\n            })\r\n            .catch((err) => {\r\n              this.props.pageLoadingSet(false);\r\n              this.setState({ isSending: false });\r\n            });\r\n        }\r\n      }\r\n    );\r\n  };\r\n  save = (redirect) => {\r\n    this.postData(\"save\", redirect);\r\n  };\r\n  saveAndFatura = () => {\r\n    this.postData(\"miktar\", \"\");\r\n  };\r\n  discountTypeChange = (discountType) => {\r\n    this.setState(\r\n      {\r\n        discountType,\r\n      },\r\n      () => {\r\n        if (this.state.total !== \"\" || this.state.discountNumber !== \"\") {\r\n          if (this.state.discountType === \"rate\") {\r\n            if (\r\n              Number(this.state.total) >=\r\n              Number(this.state.total) * Number(this.state.discountNumber / 100)\r\n            ) {\r\n              this.setState({\r\n                discountResult:\r\n                  Number(this.state.total) -\r\n                  Number(this.state.total) *\r\n                    Number(this.state.discountNumber / 100),\r\n              });\r\n            } else {\r\n              this.setState({\r\n                discountNumber: \"\",\r\n              });\r\n            }\r\n          } else {\r\n            console.log(\r\n              Number(this.state.total) - Number(this.state.discountNumber)\r\n            );\r\n            if (\r\n              Number(this.state.total) - Number(this.state.discountNumber) >=\r\n              0\r\n            ) {\r\n              this.setState({\r\n                discountResult:\r\n                  Number(this.state.total) - Number(this.state.discountNumber),\r\n              });\r\n            } else {\r\n              this.setState({\r\n                discountNumber: \"\",\r\n              });\r\n            }\r\n          }\r\n        } else {\r\n          this.setState({\r\n            discountResult: \"\",\r\n          });\r\n        }\r\n      }\r\n    );\r\n  };\r\n  setDate(date) {\r\n    this.setState({\r\n      date: date,\r\n    });\r\n  }\r\n  setDate2(date) {\r\n    this.setState({\r\n      date2: date,\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"Payments\">\r\n        <div className=\"row  mt-5\">\r\n          <div className=\"col-md-4 mb-4\">\r\n            <div className=\"border-radius border rounded\">\r\n              <div className=\"card-title\">Hasta Kartı</div>\r\n              <div className=\"card-body\">\r\n                <p>\r\n                  {this.state.name}\r\n                  <br />\r\n                  T.C. : {this.state.tckn}\r\n                </p>\r\n                <p>\r\n                  Hasta No:\r\n                  <br />\r\n                  {this.state.passionNo}\r\n                </p>\r\n                <p>\r\n                  Telefon:\r\n                  <br /> {this.state.phone}\r\n                </p>\r\n                <p>\r\n                  E-posta:\r\n                  <br />\r\n                  {this.state.email}\r\n                </p>\r\n                <div className=\"card-balance mt-5\">\r\n                  <p className=\"text-white p-0 m-0 font-weight-bold fs-16\">\r\n                    {formatMoney(this.state.balance) + \" TL\"}\r\n                  </p>\r\n                  <span className=\"text-white fs-12\">Bakiye</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-8 mb-4\">\r\n            {!this.state.alinanMiktarView && (\r\n              <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-md-6 mt-2\">\r\n                      <div className=\"top-item select-box\">\r\n                        <SelectWLabel\r\n                          name=\"selectedProcess\"\r\n                          id=\"selectedProcess\"\r\n                          label=\"Tedavi\"\r\n                          value={this.state.selectedProcess}\r\n                          setValue={(selected) => {\r\n                            this.setState({\r\n                              selectedProcess: selected,\r\n                              total: !_.isUndefined(selected[0])\r\n                                ? selected[0].price\r\n                                : \"\",\r\n                              discountResult: !_.isUndefined(selected[0])\r\n                                ? Number(selected[0].price) -\r\n                                  Number(selected[0].price) *\r\n                                    Number(this.state.discountNumber / 100)\r\n                                : \"\",\r\n                            });\r\n                          }}\r\n                          placeholder=\"Tedavi Adı\"\r\n                          options={this.state.processList}\r\n                          errorMessage={this.state.selectedProcessError}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-md-6 mt-2\">\r\n                      <div className=\"top-item select-box\">\r\n                        <SelectWLabel\r\n                          name=\"selectedDoctor\"\r\n                          id=\"selectedDoctor\"\r\n                          label=\"Doktor\"\r\n                          setValue={(selected) => {\r\n                            this.setState({\r\n                              selectedDoctor: selected,\r\n                            });\r\n                          }}\r\n                          placeholder=\"Doktor\"\r\n                          options={this.state.doctorList}\r\n                          value={this.state.selectedDoctor}\r\n                          errorMessage={this.state.selectedDoctorError}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-md-6 mt-2\">\r\n                      <InputWLabel\r\n                        classes=\"mt-3\"\r\n                        type=\"text\"\r\n                        name=\"total\"\r\n                        id=\"total\"\r\n                        label=\"İşlem Ücreti\"\r\n                        placeholder=\"İşlem Ücreti\"\r\n                        value={this.state.total}\r\n                        setValue={this.handleChange}\r\n                        inputRef={this.totalRef}\r\n                        tabIndex={1}\r\n                        errorMessage={this.state.totalError}\r\n                        disabled={this.state.editable}\r\n                      />\r\n                      <div\r\n                        className=\"discount-or-amount\"\r\n                        onClick={() => {\r\n                          this.setState({ editable: !this.state.editable });\r\n                        }}\r\n                      >\r\n                        <div\r\n                          className={`discount ${\r\n                            !this.state.editable && \"active\"\r\n                          }`}\r\n                        >\r\n                          <svg\r\n                            width={20}\r\n                            fill={this.state.editable ? \"#7273CD\" : \"#fff\"}\r\n                            viewBox=\"-15 -15 484.00019 484\"\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                          >\r\n                            <path d=\"m401.648438 18.234375c-24.394532-24.351563-63.898438-24.351563-88.292969 0l-22.101563 22.222656-235.269531 235.144531-.5.503907c-.121094.121093-.121094.25-.25.25-.25.375-.625.746093-.871094 1.121093 0 .125-.128906.125-.128906.25-.25.375-.371094.625-.625 1-.121094.125-.121094.246094-.246094.375-.125.375-.25.625-.378906 1 0 .121094-.121094.121094-.121094.25l-52.199219 156.96875c-1.53125 4.46875-.367187 9.417969 2.996094 12.734376 2.363282 2.332031 5.550782 3.636718 8.867188 3.625 1.355468-.023438 2.699218-.234376 3.996094-.625l156.847656-52.324219c.121094 0 .121094 0 .25-.121094.394531-.117187.773437-.285156 1.121094-.503906.097656-.011719.183593-.054688.253906-.121094.371094-.25.871094-.503906 1.246094-.753906.371093-.246094.75-.621094 1.125-.871094.125-.128906.246093-.128906.246093-.25.128907-.125.378907-.246094.503907-.5l257.371093-257.371094c24.351563-24.394531 24.351563-63.898437 0-88.289062zm-232.273438 353.148437-86.914062-86.910156 217.535156-217.535156 86.914062 86.910156zm-99.15625-63.808593 75.929688 75.925781-114.015626 37.960938zm347.664062-184.820313-13.238281 13.363282-86.917969-86.917969 13.367188-13.359375c14.621094-14.609375 38.320312-14.609375 52.945312 0l33.964844 33.964844c14.511719 14.6875 14.457032 38.332031-.121094 52.949218zm0 0\" />\r\n                          </svg>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n                      <label for=\"total\" className=\"fs-16\">\r\n                        Tarih\r\n                      </label>\r\n                      <DatePicker\r\n                        placeholderText=\"Tarih\"\r\n                        selected={this.state.date}\r\n                        onChange={(date) => this.setDate(date, \"date\")}\r\n                        className=\"w-100\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-md-6 mt-2\">\r\n                      <InputWLabel\r\n                        classes=\"mt-3\"\r\n                        type=\"discount\"\r\n                        name=\"discountNumber\"\r\n                        id=\"discountNumber\"\r\n                        label={\r\n                          this.state.discountType === \"rate\"\r\n                            ? \"İndirim Oranı\"\r\n                            : \"İndirim Tutarı\"\r\n                        }\r\n                        placeholder={\r\n                          this.state.discountType === \"rate\"\r\n                            ? \"İndirim Oranı\"\r\n                            : \"İndirim Tutarı\"\r\n                        }\r\n                        value={this.state.discountNumber}\r\n                        setValue={this.handleChange}\r\n                        inputRef={this.discountNumberRef}\r\n                        tabIndex={1}\r\n                      />\r\n                      <div className=\"discount-or-amount\">\r\n                        <div\r\n                          className={`discount ${\r\n                            this.state.discountType === \"rate\" && \"active\"\r\n                          }`}\r\n                          onClick={() => this.discountTypeChange(\"rate\")}\r\n                        >\r\n                          %\r\n                        </div>\r\n                        <div\r\n                          className={`discount ${\r\n                            this.state.discountType === \"amount\" && \"active\"\r\n                          }`}\r\n                          onClick={() => this.discountTypeChange(\"amount\")}\r\n                        >\r\n                          ₺\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-md-6 mt-2\">\r\n                      <InputWLabel\r\n                        classes=\"mt-3\"\r\n                        type=\"text\"\r\n                        name=\"discountResult\"\r\n                        id=\"discountResult\"\r\n                        label=\"İndirimli Fatura Tutarı\"\r\n                        placeholder=\"İndirimli Fatura Tutarı\"\r\n                        value={\r\n                          this.state.discountNumber === \"\"\r\n                            ? \"\"\r\n                            : this.state.discountResult\r\n                        }\r\n                        setValue={this.handleChange}\r\n                        inputRef={this.discountResultRef}\r\n                        tabIndex={1}\r\n                        disabled\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                      <button\r\n                        className=\"primary-button d-inline-flex\"\r\n                        onClick={() => this.save()}\r\n                      >\r\n                        Onayla\r\n                      </button>\r\n                      <button\r\n                        className=\"primary-white-button d-inline-flex ml-4\"\r\n                        onClick={() => this.save(\"next\")}\r\n                      >\r\n                        Onayla ve Miktar Ekle\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {this.state.alinanMiktarView && (\r\n              <div className=\"row\">\r\n                <div className=\"col-md-6 mt-2\">\r\n                  <InputWLabel\r\n                    classes=\"mt-3\"\r\n                    type=\"text\"\r\n                    name=\"alinanMiktar\"\r\n                    id=\"alinanMiktar\"\r\n                    label=\"Alınan Miktar\"\r\n                    placeholder=\"Alınan Miktar\"\r\n                    value={this.state.alinanMiktar}\r\n                    setValue={this.handleChange}\r\n                    inputRef={this.alinanMiktarRef}\r\n                    tabIndex={1}\r\n                    errorMessage={this.state.errorMessage}\r\n                  />\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <label for=\"total\" className=\"fs-16\">\r\n                    Tarih\r\n                  </label>\r\n                  <DatePicker\r\n                    placeholderText=\"Tarih\"\r\n                    selected={this.state.date2}\r\n                    onChange={(date) => this.setDate2(date, \"date\")}\r\n                    className=\"w-100\"\r\n                  />\r\n                </div>\r\n                <div className=\"col-md-12\">\r\n                  <button\r\n                    className=\"primary-button d-inline-flex\"\r\n                    onClick={() => this.saveAndFatura()}\r\n                  >\r\n                    Onayla\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreatePaid;\r\n","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\utils\\helper.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Auth\\pages\\ForgotPassword.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Auth\\pages\\Login.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\CreatePatient\\CreatePatient.js",["187","188","189"],"import React, { Component } from \"react\";\r\nimport InputWLabel from \"../utils/components/InputWLabel\";\r\nimport { scrollToTop } from \"../utils/helper\";\r\nimport API, { headers } from \"../utils/API\";\r\nimport { authRoutes } from \"../App/routes\";\r\nimport { validateInput } from \"../utils/helper\";\r\nexport class CreatePatient extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tckn: \"\",\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      eMail: \"\",\r\n      phoneNumber: \"\",\r\n      address: \"\",\r\n      tcknError: \"\",\r\n      firstError: \"\",\r\n      lastError: \"\",\r\n      eMailError: \"\",\r\n      phoneNumberError: \"\",\r\n      addressError: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    scrollToTop();\r\n    setTimeout(() => {\r\n      this.props.headerTitleSet(this.props.translate(\"payments\"));\r\n    }, 400);\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this._loadRowsTimeout);\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name === \"phoneNumber\") {\r\n      var val = value.replace(/^[\\d\\(\\)\\+]+$/m, \"\");\r\n      if (val === \"\") {\r\n        this.setState({ [name]: value }, () => {\r\n          setTimeout(this.handleCheck, 20);\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({ [name]: value }, () => {\r\n        setTimeout(this.handleCheck, 20);\r\n      });\r\n    }\r\n  };\r\n\r\n  handleCheck = () => {};\r\n  postData = (redirect) => {\r\n    const { tckn, firstName, lastName, eMail, phoneNumber, address } =\r\n      this.state;\r\n    this.setState(\r\n      {\r\n        tcknError: tckn === \"\" ? \"Geçerli bir TCKN numarası giriniz\" : \"\",\r\n        firstNameError: firstName === \"\" ? \"Lütfen adınızı giriniz\" : \"\",\r\n        lastNameError: lastName === \"\" ? \"Lütfen soyadınızı giriniz\" : \"\",\r\n        eMailError: !validateInput(\"email\", eMail)\r\n          ? \"Geçerli bir e-posta adresi giriniz\"\r\n          : \"\",\r\n        phoneNumberError: !validateInput(\"tel\", phoneNumber)\r\n          ? \"Geçerli bir telefon numarası giriniz\"\r\n          : \"\",\r\n        addressError: address === \"\" ? \"Lütfen adresinizi giriniz\" : \"\",\r\n      },\r\n      () => {\r\n        const {\r\n          tcknError,\r\n          firstNameError,\r\n          lastNameError,\r\n          eMailError,\r\n          phoneNumberError,\r\n          addressError,\r\n        } = this.state;\r\n        if (\r\n          tcknError === \"\" &&\r\n          firstNameError === \"\" &&\r\n          lastNameError === \"\" &&\r\n          eMailError === \"\" &&\r\n          phoneNumberError === \"\" &&\r\n          addressError === \"\"\r\n        ) {\r\n          this.props.pageLoadingSet(true);\r\n          const data = {\r\n            user: {\r\n              identityNumber: tckn,\r\n              email: eMail,\r\n              phoneNumber: phoneNumber,\r\n              firstName,\r\n              lastName,\r\n              address: address,\r\n            },\r\n          };\r\n\r\n          API.post(\"/Account/Addpassion\", data, {\r\n            headers: {\r\n              ...headers,\r\n              Authorization: `Bearer ${this.props.user.token}`,\r\n            },\r\n          })\r\n            .then((res) => {\r\n              this.props.pageLoadingSet(false);\r\n              if (redirect === \"pay\") {\r\n                this.props.history.push(\r\n                  authRoutes.addTreatment.links[this.props.lang].replace(\r\n                    \":id\",\r\n                    res.data.id\r\n                  )\r\n                );\r\n              } else {\r\n                this.props.history.push(\r\n                  authRoutes.payments.links[this.props.lang]\r\n                );\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              this.props.pageLoadingSet(false);\r\n              if (err.response.data.errors.Email) {\r\n                alert(err.response.data.errors.Email[0]);\r\n              }\r\n              if (err.response.data.errors.IdentityNumber) {\r\n                alert(err.response.data.errors.IdentityNumber[0]);\r\n              }\r\n              if (err.response.data.errors.PhoneNumber) {\r\n                alert(err.response.data.errors.PhoneNumber[0]);\r\n              }\r\n            });\r\n        }\r\n      }\r\n    );\r\n  };\r\n  save = () => {\r\n    this.postData();\r\n  };\r\n  saveAndPay = () => {\r\n    this.postData(\"pay\");\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"Payments\">\r\n        <div className=\"align-items-center justify-content-between mt-4 mb-4\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12 mb-2\">\r\n              <h1>Kayıt Oluşturma</h1>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row mt-3\">\r\n          <div className=\"col-md-4 mt-2\">\r\n            <InputWLabel\r\n              classes=\"mt-3\"\r\n              type=\"text\"\r\n              name=\"tckn\"\r\n              id=\"tckn\"\r\n              label=\"Kimlik Numarası\"\r\n              placeholder=\"Kimlik Numarası\"\r\n              value={this.state.tckn}\r\n              setValue={this.handleChange}\r\n              inputRef={this.tcknRef}\r\n              tabIndex={1}\r\n              errorMessage={this.state.tcknError}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-4 mt-2\">\r\n            <InputWLabel\r\n              classes=\"mt-3\"\r\n              type=\"text\"\r\n              name=\"firstName\"\r\n              id=\"firstName\"\r\n              label=\"Ad\"\r\n              placeholder=\"Ad\"\r\n              value={this.state.firstName}\r\n              setValue={this.handleChange}\r\n              inputRef={this.firstNameRef}\r\n              tabIndex={1}\r\n              errorMessage={this.state.firstNameError}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-4 mt-2\">\r\n            <InputWLabel\r\n              classes=\"mt-3\"\r\n              type=\"text\"\r\n              name=\"lastName\"\r\n              id=\"lastName\"\r\n              label=\"Soyad\"\r\n              placeholder=\"Soyad\"\r\n              value={this.state.lastName}\r\n              setValue={this.handleChange}\r\n              inputRef={this.lastNameRef}\r\n              tabIndex={1}\r\n              errorMessage={this.state.lastNameError}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-4 mt-2\">\r\n            <InputWLabel\r\n              classes=\"mt-3\"\r\n              type=\"email\"\r\n              name=\"eMail\"\r\n              id=\"eMail\"\r\n              label=\"E-posta\"\r\n              placeholder=\"E-posta\"\r\n              value={this.state.eMail}\r\n              setValue={this.handleChange}\r\n              inputRef={this.eMailRef}\r\n              tabIndex={1}\r\n              errorMessage={this.state.eMailError}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-4 mt-2\">\r\n            <InputWLabel\r\n              classes=\"mt-3\"\r\n              type=\"phone\"\r\n              name=\"phoneNumber\"\r\n              id=\"phoneNumber\"\r\n              label=\"Telefon\"\r\n              placeholder=\"Telefon\"\r\n              value={this.state.phoneNumber}\r\n              setValue={this.handleChange}\r\n              inputRef={this.phoneNumberRef}\r\n              tabIndex={1}\r\n              errorMessage={this.state.phoneNumberError}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-8 mt-2\">\r\n            <InputWLabel\r\n              classes=\"mt-3\"\r\n              type=\"text\"\r\n              name=\"address\"\r\n              id=\"address\"\r\n              label=\"Adres\"\r\n              placeholder=\"Adres\"\r\n              value={this.state.address}\r\n              setValue={this.handleChange}\r\n              inputRef={this.addressRef}\r\n              tabIndex={1}\r\n              errorMessage={this.state.addressError}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <button\r\n              className=\"primary-button d-inline-flex\"\r\n              onClick={() => this.save()}\r\n            >\r\n              Kayıt Al\r\n            </button>\r\n            <button\r\n              className=\"primary-white-button d-inline-flex ml-4\"\r\n              onClick={() => this.saveAndPay()}\r\n            >\r\n              Kayıt Al ve Ödeme Al\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreatePatient;\r\n","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Payments\\Payments.js",["190"],"import React, { Component } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { authRoutes } from \"../App/routes\";\r\nimport API, { headers } from \"../utils/API\";\r\nimport InputWLabel from \"../utils/components/InputWLabel\";\r\nimport { currency, formatMoney, scrollToTop } from \"../utils/helper\";\r\n\r\nexport class Payments extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      rows: [],\r\n      hasMore: false,\r\n      length: 10,\r\n      currentpage: 1,\r\n      search: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    scrollToTop();\r\n    setTimeout(() => {\r\n      this.props.headerTitleSet(this.props.translate(\"payments\"));\r\n    }, 400);\r\n    this.getData();\r\n  };\r\n\r\n  getData = () => {\r\n    if (this.state.search === \"\") {\r\n      // this.props.pageLoadingSet(true)\r\n    }\r\n    API.get(\r\n      `Payment/ListByPassion?searchBy=${this.state.search}&currentpage=${this.state.currentpage}`,\r\n      {\r\n        headers: {\r\n          ...headers,\r\n          Authorization: `Bearer ${this.props.user.token}`,\r\n          page: this.state.currentpage,\r\n        },\r\n      }\r\n    )\r\n      .then((res) => {\r\n        // this.props.pageLoadingSet(false);\r\n        const { data } = res;\r\n        const rows = this.state.rows;\r\n        data.data.map((e) => {\r\n          rows.push({\r\n            id: e.user.id,\r\n            fullName: e.user.fullName,\r\n            totalBalance: e.totalBalance,\r\n            totalCredit: e.totalCredit,\r\n            totalDebt: e.totalDebt,\r\n            currency: currency(e.currency),\r\n          });\r\n        });\r\n        this.setState({\r\n          currentpage: this.state.currentpage + 1,\r\n          rows: rows,\r\n          hasMore: data.totalPages >= this.state.currentpage + 1,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        // alert(err.response.data.value)\r\n        // this.props.pageLoadingSet(false);\r\n      });\r\n  };\r\n\r\n  timeout = \"\";\r\n  handleChange = (e) => {\r\n    const { value } = e.target;\r\n    clearTimeout(this.timeout);\r\n\r\n    this.setState(\r\n      {\r\n        rows: [],\r\n        search: value,\r\n        currentpage: 1,\r\n      },\r\n      () => {\r\n        this.timeout = setTimeout(() => {\r\n          this.getData();\r\n        }, 500);\r\n      }\r\n    );\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"Payments\">\r\n        <div className=\"align-items-center justify-content-between mt-4 mb-4\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n              <Link\r\n                className=\"primary-button d-inline-flex\"\r\n                to={authRoutes.createPatient.links[this.props.lang]}\r\n              >\r\n                Hasta Kaydı Oluştur\r\n              </Link>\r\n            </div>\r\n            <div className=\"col-md-6 d-flex justify-content-end\">\r\n              <InputWLabel\r\n                name=\"search\"\r\n                type=\"searchT\"\r\n                classes=\"mb-0 mw-400 w-100\"\r\n                id=\"search\"\r\n                value={this.state.search}\r\n                setValue={this.handleChange}\r\n                tabIndex={1}\r\n                label=\"\"\r\n                placeholder=\"Hasta Adı\"\r\n                icon={\r\n                  <svg\r\n                    width=\"20\"\r\n                    height=\"20\"\r\n                    viewBox=\"0 0 20 20\"\r\n                    fill=\"none\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                  >\r\n                    <path\r\n                      d=\"M19.6672 18.1075L14.7625 13.1963C17.2288 9.98675 16.9826 5.34958 14.0229 2.41441C12.4065 0.796245 10.3234 0 8.21364 0C6.10387 0 4.02067 0.795147 2.40443 2.41441C-0.801477 5.62392 -0.801477 10.8364 2.40443 14.0459C4.02078 15.6641 6.10387 16.4603 8.21364 16.4603C9.96701 16.4603 11.7215 15.9116 13.1742 14.7864L18.1057 19.671C18.3251 19.8907 18.5991 20 18.8999 20C19.174 20 19.4758 19.8907 19.6942 19.671C20.1063 19.2595 20.1063 18.5458 19.6674 18.1075H19.6672ZM8.24028 14.2387C6.62393 14.2387 5.14344 13.6075 3.99278 12.4834C1.6635 10.1515 1.6635 6.33874 3.99278 3.97886C5.11675 2.85363 6.62393 2.22353 8.24028 2.22353C9.85663 2.22353 11.3371 2.85473 12.4878 3.97886C13.6385 5.1041 14.2412 6.61297 14.2412 8.23114C14.2412 9.84931 13.6107 11.3315 12.4878 12.4834C11.3638 13.6354 9.82989 14.2387 8.24028 14.2387Z\"\r\n                      fill=\"#474555\"\r\n                    />\r\n                  </svg>\r\n                }\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <InfiniteScroll\r\n            dataLength={this.state.rows.length}\r\n            next={this.getData}\r\n            hasMore={this.state.hasMore}\r\n            loader={\r\n              <tr>\r\n                <td>...</td>\r\n              </tr>\r\n            }\r\n            height={600}\r\n            endMessage={\r\n              <p style={{ textAlign: \"center\" }}>\r\n                {/*<b>Yay! You have seen it all</b>*/}\r\n              </p>\r\n            }\r\n          >\r\n            <div className=\"react-infinite-table react-infinite-table-fill example-table\">\r\n              <table className=\"table table-bordered table-striped\">\r\n                <thead>\r\n                  <tr>\r\n                    <th className=\"react-infinite-table-col-0\">Hasta Adı</th>\r\n                    <th className=\"react-infinite-table-col-1\">\r\n                      Fatura Tutarı\r\n                    </th>\r\n                    <th className=\"react-infinite-table-col-2\">\r\n                      Tahsil Edilmiş\r\n                    </th>\r\n                    <th className=\"react-infinite-table-col-3\">Açık Bakiye</th>\r\n                    <th className=\"react-infinite-table-col-4\"></th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {this.state.rows.map((i, index) => (\r\n                    <tr key={index + \"a\"}>\r\n                      <td className=\"react-infinite-table-col-0\">\r\n                        <Link\r\n                          className=\"d-block\"\r\n                          to={authRoutes.userDetail.links[\r\n                            this.props.lang\r\n                          ].replace(\":id\", i.id)}\r\n                        >\r\n                          {i.fullName}\r\n                        </Link>\r\n                      </td>\r\n                      <td className=\"react-infinite-table-col-1\">\r\n                        <Link\r\n                          className=\"d-block\"\r\n                          to={authRoutes.userDetail.links[\r\n                            this.props.lang\r\n                          ].replace(\":id\", i.id)}\r\n                        >\r\n                          {formatMoney(i.totalDebt)}\r\n                        </Link>\r\n                      </td>\r\n                      <td className=\"react-infinite-table-col-2\">\r\n                        <Link\r\n                          className=\"d-block\"\r\n                          to={authRoutes.userDetail.links[\r\n                            this.props.lang\r\n                          ].replace(\":id\", i.id)}\r\n                        >\r\n                          {formatMoney(i.totalCredit)}\r\n                        </Link>\r\n                      </td>\r\n                      <td className=\"react-infinite-table-col-3\">\r\n                        <Link\r\n                          className=\"d-block\"\r\n                          to={authRoutes.userDetail.links[\r\n                            this.props.lang\r\n                          ].replace(\":id\", i.id)}\r\n                        >\r\n                          {formatMoney(i.totalBalance)}\r\n                        </Link>\r\n                      </td>\r\n                      <td className=\"react-infinite-table-col-4 text-right\">\r\n                        <div className=\"d-flex justify-content-end\">\r\n                          <Link\r\n                            className=\"primary-button md d-inline-flex min-110 mr-2\"\r\n                            to={authRoutes.addTreatment.links[\r\n                              this.props.lang\r\n                            ].replace(\":id\", i.id)}\r\n                          >\r\n                            Tedavi Ekle\r\n                          </Link>\r\n                          <Link\r\n                            className=\"primary-button md d-inline-flex min-110\"\r\n                            to={authRoutes.addPaid.links[\r\n                              this.props.lang\r\n                            ].replace(\":id\", i.id)}\r\n                          >\r\n                            Ödeme Al\r\n                          </Link>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </InfiniteScroll>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Payments;\r\n","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Home\\Home.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\App\\Layout\\components\\UserArea.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\utils\\components\\InputWLabel.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\utils\\components\\SelectWLabel.js",["191"],"import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport crypto from \"crypto\";\r\nimport { Typeahead } from 'react-bootstrap-typeahead';\r\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\r\nimport { validateInput } from \"../helper\";\r\n\r\nexport default class SelectWLabel extends Component {\r\n  state = {\r\n    isFilled: false,\r\n    isActive: false,\r\n  };\r\n\r\n  id = crypto.randomBytes(6).toString(\"hex\");\r\n\r\n  componentDidMount = () => {\r\n    if (this.props.value) this.setState({ isFilled: true }, this.handleFocus);\r\n  };\r\n\r\n  componentDidUpdate = (prevProps) => {\r\n    if (!prevProps.value && this.props.value && !this.state.isFilled)\r\n      this.setState({ isFilled: true }, this.handleFocus);\r\n  };\r\n\r\n  handleFocus = () =>\r\n    document.getElementById(`input-${this.id}`).classList.add(\"focused\");\r\n\r\n  handleBlur = (e) => {\r\n    if (this.props.validate)\r\n      if (!validateInput(this.props.type, e.target.value)) {\r\n        e.target.value = \"\";\r\n        this.props.setValue(e);\r\n      }\r\n\r\n    if (e.target.value === \"\" || e.target.value === \"empty-placeholder-value\")\r\n      document.getElementById(`input-${this.id}`).classList.remove(\"focused\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className={`SelectWLabel position-relative d-flex justify-content-start align-items-center ${\r\n          this.props.classes ? this.props.classes : ``\r\n        } ${this.props.errorMessage !=='' ? 'error':''}`}\r\n        id={`input-${this.id}`}\r\n        data-move-label={this.state.isFilled || this.state.isActive}\r\n        data-w-icon={\"icon\" in this.props}\r\n        data-label={this.props.label}\r\n        data-error={Boolean(this.props.errorMessage)}\r\n        data-error-message={`* ${this.props.errorMessage}`}\r\n      >\r\n        {this.props.icon ? (\r\n          <div className=\"icon d-flex justify-content-center align-items-center\">\r\n            {this.props.icon}\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <Typeahead\r\n          id={this.props.id}\r\n          onChange={this.props.setValue}\r\n          options={this.props.options}\r\n          placeholder={this.props.placeholder}\r\n          selected={this.props.value}\r\n          value={this.props.value}\r\n        />\r\n        <label className='position-absolute'>{this.props.label}</label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\utils\\components\\CutomCheckbox.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Auth\\pages\\components\\LeftSide.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Calendar\\Calendar.js",["192","193","194"],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\Calendar\\components\\AddAppointment.js",["195"],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\utils\\components\\SimpleList.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\utils\\components\\Loader.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\utils\\components\\MonkButton.js",[],"C:\\Users\\user\\Desktop\\source\\monk-pay\\src\\utils\\components\\Modal.js",[],{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","severity":1,"message":"201","line":13,"column":8,"nodeType":"202","messageId":"203","endLine":13,"endColumn":33},{"ruleId":"200","severity":1,"message":"204","line":15,"column":8,"nodeType":"202","messageId":"203","endLine":15,"endColumn":33},{"ruleId":"200","severity":1,"message":"205","line":17,"column":8,"nodeType":"202","messageId":"203","endLine":17,"endColumn":24},{"ruleId":"200","severity":1,"message":"206","line":1,"column":10,"nodeType":"202","messageId":"203","endLine":1,"endColumn":15},{"ruleId":"200","severity":1,"message":"207","line":13,"column":7,"nodeType":"202","messageId":"203","endLine":13,"endColumn":16},{"ruleId":"200","severity":1,"message":"208","line":2,"column":10,"nodeType":"202","messageId":"203","endLine":2,"endColumn":14},{"ruleId":"200","severity":1,"message":"209","line":8,"column":23,"nodeType":"202","messageId":"203","endLine":8,"endColumn":31},{"ruleId":"200","severity":1,"message":"210","line":8,"column":33,"nodeType":"202","messageId":"203","endLine":8,"endColumn":44},{"ruleId":"200","severity":1,"message":"211","line":9,"column":8,"nodeType":"202","messageId":"203","endLine":9,"endColumn":19},{"ruleId":"200","severity":1,"message":"208","line":2,"column":10,"nodeType":"202","messageId":"203","endLine":2,"endColumn":14},{"ruleId":"200","severity":1,"message":"212","line":4,"column":38,"nodeType":"202","messageId":"203","endLine":4,"endColumn":54},{"ruleId":"200","severity":1,"message":"213","line":11,"column":10,"nodeType":"202","messageId":"203","endLine":11,"endColumn":20},{"ruleId":"214","severity":1,"message":"215","line":68,"column":27,"nodeType":"216","messageId":"217","endLine":68,"endColumn":29},{"ruleId":"218","severity":1,"message":"219","line":235,"column":15,"nodeType":"220","endLine":240,"endColumn":16},{"ruleId":"218","severity":1,"message":"219","line":391,"column":27,"nodeType":"220","endLine":396,"endColumn":28},{"ruleId":"218","severity":1,"message":"219","line":400,"column":27,"nodeType":"220","endLine":405,"endColumn":28},{"ruleId":"218","severity":1,"message":"219","line":409,"column":25,"nodeType":"220","endLine":414,"endColumn":26},{"ruleId":"214","severity":1,"message":"215","line":81,"column":24,"nodeType":"216","messageId":"217","endLine":81,"endColumn":26},{"ruleId":"214","severity":1,"message":"215","line":112,"column":31,"nodeType":"216","messageId":"217","endLine":112,"endColumn":33},{"ruleId":"214","severity":1,"message":"215","line":147,"column":31,"nodeType":"216","messageId":"217","endLine":147,"endColumn":33},{"ruleId":"221","severity":1,"message":"222","line":40,"column":36,"nodeType":"223","messageId":"224","endLine":40,"endColumn":37,"suggestions":"225"},{"ruleId":"221","severity":1,"message":"226","line":40,"column":38,"nodeType":"223","messageId":"224","endLine":40,"endColumn":39,"suggestions":"227"},{"ruleId":"221","severity":1,"message":"228","line":40,"column":40,"nodeType":"223","messageId":"224","endLine":40,"endColumn":41,"suggestions":"229"},{"ruleId":"214","severity":1,"message":"215","line":47,"column":27,"nodeType":"216","messageId":"217","endLine":47,"endColumn":29},{"ruleId":"200","severity":1,"message":"230","line":2,"column":8,"nodeType":"202","messageId":"203","endLine":2,"endColumn":17},{"ruleId":"200","severity":1,"message":"213","line":11,"column":10,"nodeType":"202","messageId":"203","endLine":11,"endColumn":20},{"ruleId":"200","severity":1,"message":"231","line":14,"column":10,"nodeType":"202","messageId":"203","endLine":14,"endColumn":17},{"ruleId":"200","severity":1,"message":"232","line":54,"column":13,"nodeType":"202","messageId":"203","endLine":54,"endColumn":21},{"ruleId":"200","severity":1,"message":"233","line":6,"column":10,"nodeType":"202","messageId":"203","endLine":6,"endColumn":24},"no-native-reassign",["234"],"no-negated-in-lhs",["235"],"no-unused-vars","'doctor_settingsMenuActive' is defined but never used.","Identifier","unusedVar","'system_settingsMenuActive' is defined but never used.","'clinicMenuActive' is defined but never used.","'alert' is defined but never used.","'allRoutes' is assigned a value but never used.","'Link' is defined but never used.","'currency' is defined but never used.","'formatMoney' is defined but never used.","'InputWLabel' is defined but never used.","'setDefaultLocale' is defined but never used.","'authRoutes' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-useless-escape","Unnecessary escape character: \\(.","Literal","unnecessaryEscape",["236","237"],"Unnecessary escape character: \\).",["238","239"],"Unnecessary escape character: \\+.",["240","241"],"'PropTypes' is defined but never used.","'toArray' is defined but never used.","'currrent' is assigned a value but never used.","'SuggestionItem' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"242","fix":"243","desc":"244"},{"messageId":"245","fix":"246","desc":"247"},{"messageId":"242","fix":"248","desc":"244"},{"messageId":"245","fix":"249","desc":"247"},{"messageId":"242","fix":"250","desc":"244"},{"messageId":"245","fix":"251","desc":"247"},"removeEscape",{"range":"252","text":"253"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"254","text":"255"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"256","text":"253"},{"range":"257","text":"255"},{"range":"258","text":"253"},{"range":"259","text":"255"},[1062,1063],"",[1062,1062],"\\",[1064,1065],[1064,1064],[1066,1067],[1066,1066]]